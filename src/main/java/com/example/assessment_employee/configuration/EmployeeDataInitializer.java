package com.example.assessment_employee.configuration;

import com.example.assessment_employee.entity.Account;
import com.example.assessment_employee.entity.Department;
import com.example.assessment_employee.entity.Employee;
import com.example.assessment_employee.repository.AccountRepository;
import com.example.assessment_employee.repository.DepartmentRepository;
import com.example.assessment_employee.repository.EmployeeRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;

/**
 * Employee Data Initializer - Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u nh√¢n vi√™n v√† t√†i kho·∫£n
 * Ch·∫°y m·ªôt l·∫ßn khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class EmployeeDataInitializer implements CommandLineRunner {

    private final DepartmentRepository departmentRepository;
    private final EmployeeRepository employeeRepository;
    private final AccountRepository accountRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        log.info("üöÄ Starting employee data initialization...");
        
        // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu nh√¢n vi√™n ch∆∞a
        if (employeeRepository.count() > 0) {
            log.info("‚úÖ Employee data already exists, skipping initialization");
            return;
        }

        try {
            initializeDepartments();
            initializeEmployeesAndAccounts();
            
            log.info("üéâ Employee data initialization completed successfully!");
        } catch (Exception e) {
            log.error("‚ùå Error during employee data initialization: {}", e.getMessage(), e);
            throw e;
        }
    }

    /**
     * Kh·ªüi t·∫°o c√°c ph√≤ng ban
     */
    private void initializeDepartments() {
        log.info("üìÅ Initializing departments...");
        
        // Ki·ªÉm tra xem ƒë√£ c√≥ ph√≤ng ban ch∆∞a
        if (departmentRepository.count() > 0) {
            log.info("‚úÖ Departments already exist, skipping department initialization");
            return;
        }
        
        List<Department> departments = Arrays.asList(
            createDepartment("Ph√≤ng Nh√¢n s·ª±", "HR001"),
            createDepartment("Ph√≤ng C√¥ng ngh·ªá th√¥ng tin", "IT001"),
            createDepartment("Ph√≤ng Kinh doanh", "SALES001"),
            createDepartment("Ph√≤ng K·∫ø to√°n", "ACC001"),
            createDepartment("Ph√≤ng Marketing", "MKT001")
        );
        
        departmentRepository.saveAll(departments);
        log.info("‚úÖ Created {} departments", departments.size());
    }

    /**
     * Kh·ªüi t·∫°o nh√¢n vi√™n v√† t√†i kho·∫£n
     */
    private void initializeEmployeesAndAccounts() {
        log.info("üë• Initializing employees and accounts...");
        
        List<Department> departments = departmentRepository.findAll();
        
        // Admin account
        createEmployeeWithAccount(
            "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng", "Qu·∫£n tr·ªã", "Th·∫°c sƒ© CNTT", 
            "Qu·∫£n l√Ω", "2020-01-15", "To√†n th·ªùi gian",
            departments.get(0), // HR Department
            "admin", "admin123", "MANAGER", "ACTIVE"
        );
        
        // HR employees
        createEmployeeWithAccount(
            "Nguy·ªÖn VƒÉn An", "Nh√¢n s·ª±", "C·ª≠ nh√¢n Qu·∫£n tr·ªã", 
            "Tr∆∞·ªüng ph√≤ng", "2021-03-01", "To√†n th·ªùi gian",
            departments.get(0), // HR Department
            "hr.manager", "hr123", "MANAGER", "ACTIVE"
        );
        
        createEmployeeWithAccount(
            "Tr·∫ßn Th·ªã B√¨nh", "Nh√¢n s·ª±", "C·ª≠ nh√¢n T√¢m l√Ω", 
            "Chuy√™n vi√™n", "2022-06-15", "To√†n th·ªùi gian",
            departments.get(0), // HR Department
            "hr.staff", "hr123", "EMPLOYEE", "ACTIVE"
        );
        
        // IT employees
        createEmployeeWithAccount(
            "L√™ VƒÉn C∆∞·ªùng", "C√¥ng ngh·ªá", "Th·∫°c sƒ© CNTT", 
            "Tr∆∞·ªüng ph√≤ng", "2020-08-01", "To√†n th·ªùi gian",
            departments.get(1), // IT Department
            "it.manager", "it123", "MANAGER", "ACTIVE"
        );
        
        createEmployeeWithAccount(
            "Ph·∫°m Th·ªã Dung", "C√¥ng ngh·ªá", "C·ª≠ nh√¢n CNTT", 
            "L·∫≠p tr√¨nh vi√™n Senior", "2021-01-15", "To√†n th·ªùi gian",
            departments.get(1), // IT Department
            "dev.senior", "dev123", "EMPLOYEE", "ACTIVE"
        );
        
        createEmployeeWithAccount(
            "Ho√†ng VƒÉn Em", "C√¥ng ngh·ªá", "C·ª≠ nh√¢n CNTT", 
            "L·∫≠p tr√¨nh vi√™n Junior", "2023-03-01", "To√†n th·ªùi gian",
            departments.get(1), // IT Department
            "dev.junior", "dev123", "EMPLOYEE", "ACTIVE"
        );
        
        // Sales employees
        createEmployeeWithAccount(
            "V≈© Th·ªã Giang", "Kinh doanh", "C·ª≠ nh√¢n Kinh t·∫ø", 
            "Tr∆∞·ªüng ph√≤ng", "2021-05-01", "To√†n th·ªùi gian",
            departments.get(2), // Sales Department
            "sales.manager", "sales123", "MANAGER", "ACTIVE"
        );
        
        createEmployeeWithAccount(
            "ƒê·ªó VƒÉn H√πng", "Kinh doanh", "C·ª≠ nh√¢n Marketing", 
            "Nh√¢n vi√™n kinh doanh", "2022-09-01", "To√†n th·ªùi gian",
            departments.get(2), // Sales Department
            "sales.staff", "sales123", "EMPLOYEE", "ACTIVE"
        );
        
        // Accounting employees
        createEmployeeWithAccount(
            "Ng√¥ Th·ªã Lan", "K·∫ø to√°n", "C·ª≠ nh√¢n K·∫ø to√°n", 
            "Tr∆∞·ªüng ph√≤ng", "2020-11-01", "To√†n th·ªùi gian",
            departments.get(3), // Accounting Department
            "acc.manager", "acc123", "MANAGER", "ACTIVE"
        );
        
        createEmployeeWithAccount(
            "B√πi VƒÉn Minh", "K·∫ø to√°n", "C·ª≠ nh√¢n T√†i ch√≠nh", 
            "K·∫ø to√°n vi√™n", "2022-02-01", "To√†n th·ªùi gian",
            departments.get(3), // Accounting Department
            "acc.staff", "acc123", "EMPLOYEE", "ACTIVE"
        );
        
        // Marketing employees
        createEmployeeWithAccount(
            "ƒêinh Th·ªã Nga", "Marketing", "C·ª≠ nh√¢n Marketing", 
            "Tr∆∞·ªüng ph√≤ng", "2021-07-01", "To√†n th·ªùi gian",
            departments.get(4), // Marketing Department
            "mkt.manager", "mkt123", "MANAGER", "ACTIVE"
        );
        
        createEmployeeWithAccount(
            "L√Ω VƒÉn Phong", "Marketing", "C·ª≠ nh√¢n Truy·ªÅn th√¥ng", 
            "Chuy√™n vi√™n Marketing", "2023-01-15", "To√†n th·ªùi gian",
            departments.get(4), // Marketing Department
            "mkt.staff", "mkt123", "EMPLOYEE", "ACTIVE"
        );
        
        // Test inactive employee
        createEmployeeWithAccount(
            "Tr·∫ßn VƒÉn Test", "Th·ª≠ nghi·ªám", "C·ª≠ nh√¢n", 
            "Nh√¢n vi√™n th·ª≠ nghi·ªám", "2023-12-01", "B√°n th·ªùi gian",
            departments.get(0), // HR Department
            "test.inactive", "test123", "EMPLOYEE", "INACTIVE"
        );
        
        log.info("‚úÖ Created employees and accounts");
    }

    // Helper methods
    private Department createDepartment(String name, String managerCode) {
        return Department.builder()
                .departmentName(name)
                .managerCode(managerCode)
                .build();
    }

    private void createEmployeeWithAccount(String fullName, String division, String basic,
                                         String staffType, String startDate, String type,
                                         Department department, String username, String password, 
                                         String role, String status) {
        // T·∫°o Account tr∆∞·ªõc
        Account account = Account.builder()
                .username(username)
                .password(passwordEncoder.encode(password))
                .role(role)
                .status(status)
                .build();
        
        Account savedAccount = accountRepository.save(account);
        
        // T·∫°o Employee v√† li√™n k·∫øt v·ªõi Account
        Employee employee = Employee.builder()
                .fullName(fullName)
                .division(division)
                .basic(basic)
                .staffType(staffType)
                .startDate(startDate)
                .type(type)
                .account(savedAccount)
                .department(department)
                .build();
        
        employeeRepository.save(employee);
        
        log.debug("Created employee: {} with account: {}", fullName, username);
    }
}
